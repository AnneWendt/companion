{% include ../_includes/header.liquid %}

<script src="socket.io-file-client.js"></script> 
<script>
var _updating = false;
var socket = io();

// Listen to internet connectivity status updates from the backend
// Disable features that require backend internet connectivity when
// there is no connection
socket.on('internet status', function(data) {
	console.log('got internet status', data);
	if(_updating) {
		return; // Don't enable buttons until update is complete
	}
	enableInternetUpdates(data);
});

// Listen to RAM and CPU usage stats
socket.on('cpu stats', function(data) {
	console.log('got cpu status', data);
});

socket.on('terminal output', function(data) {
	var terminalEl = document.getElementById("terminal-output");
	var html = terminalEl.innerHTML + data;
	var autoscroll = terminalEl.scrollHeight - terminalEl.scrollTop
		=== terminalEl.clientHeight;
	terminalEl.innerHTML = html.replace(/\n.*?\r/g, "\n");
	if (autoscroll) {
		terminalEl.scrollTop = terminalEl.scrollHeight;
	}
});

socket.on('companion version', function(data) {
	document.getElementById('companion version').innerHTML = data;
});

socket.on('companion latest', function(data) {
	console.log('got companion latest');
	document.getElementById('companionButton').style.display = "inline";
	document.getElementById('companionAvailable').innerHTML = "Download Update: An Update is Available!";
});

function updateCompanion(fileInfo) {
	if (fileInfo) {
		document.getElementById('companionProgress').innerHTML = "";
		uploader.off('stream', companionProgress);
		uploader.off('complete', updateCompanion);
		socket.emit('update companion', fileInfo.name);
	} else {
		socket.emit('update companion');
	}
	_updating = true;
	enableUpdates(false);
	showCompanionSpinner(true);
}

function companionProgress(fileInfo) {
	document.getElementById('companionProgress').innerHTML = `Uploading: ${fileInfo.sent} / ${fileInfo.size} byte(s)`;
}

function updatePixhawkFile(fileInfo) {
	document.getElementById('pixhawkProgress').innerHTML = "";
	uploader.off('stream', pixhawkProgress);
	uploader.off('complete', updatePixhawkFile);
	socket.emit('update pixhawk', {
		'option': 'file',
		'file': fileInfo.name
	});
}

function updatePixhawk(option) {
	_updating = true;
	enableUpdates(false);
	showPixhawkSpinner(true);
	socket.emit('update pixhawk', {
		'option' : option
	});
}

function pixhawkProgress(fileInfo) {
	document.getElementById('pixhawkProgress').innerHTML = `Uploading: ${fileInfo.sent} / ${fileInfo.size} byte(s)`;
}

socket.on('pixhawk update complete', function(data) {
	_updating = false;
	enableUpdates(true);
	showPixhawkSpinner(false);
});

socket.on('companion update complete', function(data) {
	_updating = false;
	enableUpdates(true);
	showCompanionSpinner(false);
});

function enableInternetUpdates(enabled) {
	document.getElementById('companionButton').disabled = !enabled;
	document.getElementById('devButton').disabled = !enabled;
	document.getElementById('betaButton').disabled = !enabled;
	document.getElementById('stableButton').disabled = !enabled;
}

function enableUpdates(enabled) {
	enableInternetUpdates(enabled);
	document.getElementById('pixhawkFileButton').disabled = !enabled;
	document.getElementById('companionFileButton').disabled = !enabled;
}

function showCompanionSpinner(show) {
	document.getElementById('companionSpinner').style.visibility = show ? "visible" : "hidden";
}

function showPixhawkSpinner(show) {
	document.getElementById('pixhawkSpinner').style.visibility = show ? "visible" : "hidden";
}

socket.emit('get companion version');
socket.emit('get companion latest');

var uploader = new SocketIOFileClient(socket);

uploader.on('start', function(fileInfo) {
	console.log('Start uploading', fileInfo);
});
uploader.on('stream', function(fileInfo) {
	console.log('Streaming... sent ' + fileInfo.sent + ' bytes.');
});
uploader.on('complete', function(fileInfo) {
	console.log('Upload Complete', fileInfo);
});
uploader.on('error', function(err) {
	console.log('Error!', err);
	disableUpdates(false);
	showPixhawkSpinner(false);
	showCompanionSpinner(false);
	
	uploader.off('stream', pixhawkProgress);
	uploader.off('complete', updatePixhawkFile);
	
	uploader.off('stream', companionProgress);
	uploader.off('complete', updateCompanion);
});
uploader.on('abort', function(fileInfo) {
	console.log('Aborted: ', fileInfo);
});

function submit(onComplete, onStream, fileElement) {
	var fileEl = document.getElementById(fileElement);
	var uploadIds = uploader.upload(fileEl);
	console.log(fileEl.value);
	
	if (!fileEl.value) {
		console.log('No file selected!');
		return false;
	}
	
	disableUpdates(true);
	if (fileElement == 'pixhawkFile') {
		showPixhawkSpinner(true);
	} else {
		showCompanionSpinner(true);
	}
	
	uploader.on('complete', onComplete);
	uploader.on('stream', onStream);
};

function startWLDriver() {
	var ip = document.getElementById('wlIP').value;
	var port = document.getElementById('wlPort').value;
	var args = {}
	if (ip.length) {
		args.ip = ip;
	}
	if (port.length) {
		args.port = port;
	}
	socket.emit('start WL driver', args);
}

function stopWLDriver() {
	socket.emit('stop WL driver');
}
</script>

<h1>Software Status and Update</h1>

<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					ArduSub Companion Status
					<i id="companionSpinner" class="fa fa-refresh fa-spin fa-2x fa-fw" style="visibility:hidden;"></i>
					<span id="companionProgress"></span>
				</h3>
			</div>
			<div class="panel-body">
				<h4>Version: </h4>
				<span id="companion version">Companion Version</span>
				<div>
					<h4 id="companionAvailable">Download Update: No Updates Available</h4>
					<button id="companionButton" type="button" class="btn btn-primary" onclick="updateCompanion()" style="display:none" disabled=true>Update</button>
				</div>
				<div>
					<h4>Upload Zipped Update:</h4>
					<input id="companionFileButton" type="submit" class="btn btn-primary" value="Upload" onClick="submit(updateCompanion, companionProgress, 'companionFile')" style="display:table-cell"/>
					<input type="file" id="companionFile" style="display:table-cell;" />
				</div>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Pixhawk Firmware Update
					<i id="pixhawkSpinner" class="fa fa-refresh fa-spin fa-2x fa-fw" style="visibility:hidden;"></i>
					<span id="pixhawkProgress"></span>
				</h3>
			</div>
			<div class="panel-body">
				<div>
					<h4>Download and Update (Requires Internet Connection):</h4>
					<button id="devButton" type="button" class="btn btn-primary" onclick="updatePixhawk('dev')" disabled=true>Development</button>
					<button id="betaButton" type="button" class="btn btn-primary" onclick="updatePixhawk('beta')" disabled=true>Beta</button>
					<button id="stableButton" type="button" class="btn btn-primary" onclick="updatePixhawk('stable')" disabled=true>Stable</button>
				</div>
				<div>
					<h4>Upload Firmware File:</h4>
					<input id="pixhawkFileButton" type="submit" class="btn btn-primary" value="Upload" onClick="submit(updatePixhawkFile, pixhawkProgress, 'pixhawkFile')" style="display:table-cell"/>
					<input type="file" id="pixhawkFile" style="display:table-cell" enabled/>
				</div>
				<br />
				<div>
				<textarea rows="20" cols="120" id="terminal-output" style="font-family:monospace"></textarea>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Water Linked Underwater GPS Driver
				</h3>
			</div>
			<div class="panel-body">
				<div id="udpConfig">
					<div class="form-group">
						<label>Water Linked IP Address:</label>
						<input type="text" class="form-control" id="wlIP"></input>
					</div>
					<div class="form-group">
						<label>Water Linked Port:</label>
						<input type="text" class="form-control" id="wlPort"></input>
					</div>
					<button type="button" class="btn btn-primary" onclick="startWLDriver()">Start Water Linked Driver</button>
					<button type="button" class="btn btn-primary" onclick="stopWLDriver()">Stop Water Linked Driver</button>
				</div>
			</div>
		</div>
	</div>
</div>

{% include ../_includes/footer.liquid %}
